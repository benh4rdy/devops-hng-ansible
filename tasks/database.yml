---
- name: Install PostgreSQL and dependencies
  apt: name={{ item }} state=latest update_cache=yes
  loop:
  - postgresql
  - postgresql-contrib
  - libpq-dev
  - python3-psycopg2

- name: Install ACL, required for Ansible Super User
  apt: name=acl state=present update_cache=yes

- name: Check if PostgreSQL data directory exists
  stat:
    path: "{{ postgresql_data_path }}"
  register: postgresql_data_dir

- name: Check if PostgreSQL data directory is empty
  command: find "{{ postgresql_data_path }}" -mindepth 1 -print -quit
  register: postgresql_data_dir_contents
  when: postgresql_data_dir.stat.exists
  changed_when: false
  failed_when: false

- name: Clear PostgreSQL data directory if not empty
  command: rm -rf "{{ postgresql_data_path }}/*"
  when: postgresql_data_dir.stat.exists and postgresql_data_dir_contents.stdout != ""

- name: Initialize PostgreSQL
  shell: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_path }}"
  become_user: postgres
  when: postgresql_data_dir.stat.exists == false or postgresql_data_dir_contents.stdout == ""

- name: Start and enable PostgreSQL service
  service: name=postgresql state=started enabled=yes

- name: Update pg_hba.conf to allow password authentication for postgres user
  lineinfile:
    path: "{{ pg_hba_conf }}"
    regexp: '^local\s+all\s+postgres\s+peer$'
    line: 'local   all             postgres                                md5'
    state: present
  become_user: postgres
  notify: Restart PostgreSQL

- name: Allow remote connections in pg_hba.conf
  ansible.builtin.lineinfile:
    path: "{{ pg_hba_conf }}"
    regexp: '^host'
    line: 'host    all             all             0.0.0.0/0               md5'
    create: yes
  become_user: postgres
  notify: Restart PostgreSQL

- name: Listen for all addresses in postgresql.conf
  ansible.builtin.lineinfile:
    path: "{{ postgresql_conf }}"
    regexp: '^#listen_addresses =.*'
    line: "listen_addresses = '*'"
    create: yes
  become_user: postgres
  notify: Restart PostgreSQL

- name: Create a PostgreSQL database
  postgresql_db: 
    name: "{{ db_name }}"
    state: present
    login_user: "{{ db_user }}"
    login_password: "{{ db_pass }}"
  become_user: postgres

- name: Create a PostgreSQL user
  postgresql_user:
    db: "{{db_name}}"
    login_password: "{{ db_pass }}"
    encrypted: true
    name: "{{db_user}}"
    state: present
  become_user: postgres

- name: Create the secrets directory
  file: 
    path: "{{ secret_dir }}"
    state: directory
    mode: '0700'

- name: Save admin user credentials
  file:
    path: "{{ secret_dir }}{{ secret_file }}"
    state: touch
    mode: '0600'

- name: Write admin user credentials to file
  copy:
    dest: "{{ secret_dir }}{{ secret_file }}"
    content: |
      admin_user: {{ db_user }}
      admin_password: {{ db_pass }}
    mode: '0600'

- name: Grant db user access to db
  postgresql_privs:
    type: database
    database: "{{ db_name }}"
    roles: "{{db_user}}"
    privs: all
    grant_option: false
  become_user: postgres
